/* Tests Boost's mutex, condition variable and permit under heavy load
(C) 2014 Niall Douglas http://www.nedproductions.biz/


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifdef _WIN32
#define _WIN32_WINNT 0x602
#include <Windows.h>
#include <synchapi.h>
#else
#include <pthread.h>
#endif

//#define BOOST_THREAD_DONT_PROVIDE_INTERRUPTIONS

#include "boost/thread/mutex.hpp"
#include "boost/thread/condition_variable.hpp"
#include "boost/thread/permit.hpp"
#include "boost/thread/thread.hpp"
#include "boost/detail/lightweight_test.hpp"
#include "boost/make_shared.hpp"
#include "boost/bind/bind.hpp"

#include <iostream>

template<class state> struct notify_locked
{
    static const char *desc() { return "wait mutex unlock/lock atomicity"; }
    static void Do(boost::atomic<bool> &gate, boost::atomic<size_t> &ready, boost::shared_ptr<state> s, bool notifier)
    {
        ++ready;
        while(!gate)
            boost::this_thread::yield();
        if(notifier)
        {
            // Wait until waiter thread has locked mutex
            while(!s->gate)
                boost::this_thread::yield();
            while(gate)
            {
                s->i.lock();  // Shouldn't return until wait has begun
                s->i.signal();  // Release the wait
                ++s->signalled;
                size_t waitenter=s->waitenter;
                s->i.unlock();  // Wait shouldn't exit until this line
                // Wait for wait to complete or time out
                while(waitenter!=s->waitexit && gate)
                    boost::this_thread::yield();
            }
        }
        else
        {
            s->i.lock();
            s->gate=true;  // Release notifier thread now mutex is locked
            try
            {
                while(gate)
                {
                    ++s->waitenter;
                    // If the waitable really does atomically unlock the mutex
                    // during around the wait, this should never time out.
                    if(!s->i.wait(1000) && gate)
                        ++s->timedout;
                    ++s->waitexit;
                }
            }
            catch(...)
            {
                ++s->timedout;
                throw;
            }
            s->i.unlock();
        }
    }
};

template<class state> struct notify_unlocked
{
    static const char *desc() { return "whether unsynchronised notifies are lost"; }
    static void Do(boost::atomic<bool> &gate, boost::atomic<size_t> &ready, boost::shared_ptr<state> s, bool notifier)
    {
        ++ready;
        while(!gate)
            boost::this_thread::yield();
        if(notifier)
        {
            while(gate)
            {
                // Wait for wait to begin
                s->gate=true;
                while(s->gate && gate)
                    boost::this_thread::yield();
                s->i.signal();  // Release the wait
                ++s->signalled;
                // Wait for wait to complete or time out
                while(s->waitexit!=s->waitenter && gate)
                    boost::this_thread::yield();
                s->i.unsignal();  // Unrelease the wait
            }
        }
        else
        {
            s->i.lock();
            try
            {
                while(gate)
                {
                    while(!s->gate.exchange(false) && gate)
                        boost::this_thread::yield();
                    ++s->waitenter;
                    if(!s->i.wait(1000) && gate)
                        ++s->timedout;
                    ++s->waitexit;
                }
            }
            catch(...)
            {
                ++s->timedout;
                throw;
            }
            s->i.unlock();
        }
    }
};

template<class impl, template<class> class e_impl> struct test_notify
{
    boost::atomic<bool> gate;
    boost::atomic<size_t> ready;
    struct state
    {
        impl i;
        boost::atomic<bool> gate;
        boost::atomic<size_t> signalled, waitenter, waitexit, timedout;
        state() : gate(false), signalled(0), waitenter(0), waitexit(0), timedout(0) { }
    };
    bool operator()(int seconds)
    {
        std::cout << std::endl << std::endl << "Testing " << impl::desc() << " for " << e_impl<state>::desc() << " ..." << std::endl << std::endl;
        gate=false;
        ready=0;
        size_t concurrency=boost::thread::hardware_concurrency()+1;
        if(concurrency<1) concurrency=1;
        std::vector<boost::shared_ptr<state> > states;
        std::vector<boost::shared_ptr<boost::thread> > threads;
        for(size_t n=0; n<concurrency; n++)
        {
            states.push_back(boost::make_shared<state>());
            threads.push_back(boost::make_shared<boost::thread>(boost::bind(&e_impl<state>::Do, boost::ref(gate), boost::ref(ready), states.back(), false)));
            threads.push_back(boost::make_shared<boost::thread>(boost::bind(&e_impl<state>::Do, boost::ref(gate), boost::ref(ready), states.back(), true)));
        }
        while(ready<concurrency)
            boost::this_thread::yield();
        gate=true;
        boost::this_thread::sleep_for(boost::chrono::seconds(seconds));
        gate=false;
        for(size_t n=0; n<threads.size(); n++)
            threads[n]->join();
        size_t signalled=0, waitenter=0, waitexit=0, timedout=0;
        for(size_t n=0; n<states.size(); n++)
        {
            signalled+=states[n]->signalled;
            waitenter+=states[n]->waitenter;
            waitexit+=states[n]->waitexit;
            timedout+=states[n]->timedout;
        }
        std::cout << "   Of " << signalled << " signals and " << waitexit << " waits, " << timedout << " signals were lost." << std::endl;
        std::cout << "   Specifically for these thread pairs:" << std::endl;
        for(size_t n=0; n<states.size(); n++)
            std::cout << "      " << n << ": signalled=" << states[n]->signalled << " waits=" << states[n]->waitexit << " timedout=" << states[n]->timedout << std::endl;
        return timedout==0;
    }
};

template<class impl> struct test_producerconsumer
{
    boost::atomic<bool> gate;
    boost::atomic<size_t> ready;
    impl i;
    struct state
    {
        boost::atomic<size_t> signalled, waitenter, waitexit, timedout;
        state() : signalled(0), waitenter(0), waitexit(0), timedout(0) { }
    };
    bool operator()(int seconds)
    {
        std::cout << std::endl << std::endl << "Testing " << impl::desc() << " for producer-consumer problems ..." << std::endl << std::endl;
        gate=false;
        ready=0;
        size_t concurrency=boost::thread::hardware_concurrency()*2+1;
        if(concurrency<1) concurrency=1;
        std::vector<boost::shared_ptr<state> > states;
        std::vector<boost::shared_ptr<boost::thread> > threads;
        for(size_t n=0; n<concurrency; n++)
        {
            states.push_back(boost::make_shared<state>());
            threads.push_back(boost::make_shared<boost::thread>(boost::bind(&test_producerconsumer::Do, this, states.back(), impl::consumes ? n<boost::thread::hardware_concurrency() : !n, concurrency-boost::thread::hardware_concurrency())));
        }
        while(ready<concurrency)
            boost::this_thread::yield();
        gate=true;
        boost::this_thread::sleep_for(boost::chrono::seconds(seconds));
        gate=false;
        for(size_t n=0; n<threads.size(); n++)
            threads[n]->join();
        size_t signalled=0, waitenter=0, waitexit=0, timedout=0;
        for(size_t n=0; n<states.size(); n++)
        {
            signalled+=states[n]->signalled;
            waitenter+=states[n]->waitenter;
            waitexit+=states[n]->waitexit;
            timedout+=states[n]->timedout;
        }
        std::cout << "   Of " << signalled << " signals and " << waitexit << " waits, " << timedout << " signals were lost." << std::endl;
        std::cout << "   Specifically for these thread pairs:" << std::endl;
        for(size_t n=0; n<states.size(); n++)
            std::cout << "      " << n << ": signalled=" << states[n]->signalled << " waits=" << states[n]->waitexit << " timedout=" << states[n]->timedout << std::endl;
        return timedout==0;
    }
    void Do(boost::shared_ptr<state> s, bool notifier, size_t concurrency)
    {
        ++ready;
        while(!gate)
            boost::this_thread::yield();
        if(notifier)
        {
            while(gate)
            {
                // Wait for wait to begin
                if(s->waitenter-s->waitexit>=concurrency && gate)
                    boost::this_thread::yield();
                i.signal();  // Release the wait
                ++s->signalled;
                i.unsignal();  // Unrelease the wait
            }
        }
        else
        {
            i.lock();
            try
            {
                while(gate)
                {
                    ++s->waitenter;
                    if(!i.wait(1000) && gate)
                        ++s->timedout;
                    ++s->waitexit;
                }
            }
            catch(...)
            {
                ++s->timedout;
                throw;
            }
            i.unlock();
        }
    }
};

struct boost_condvar
{
    static const char *desc() { return "boost::condition_variable"; }
    typedef boost::mutex mutex_t;
    typedef boost::condition_variable waitable_t;
    mutex_t mutex;
    waitable_t waitable;
    // No constructor necessary
    void lock() { mutex.lock(); }
    bool try_lock() { return mutex.try_lock(); }
    void unlock() { mutex.unlock(); }
    bool wait(size_t ms)
    {
        boost::cv_status ret=boost::cv_status::timeout;
        boost::unique_lock<mutex_t> lock(mutex, boost::adopt_lock);
        try
        {
            ret=waitable.wait_for(lock, boost::chrono::milliseconds(ms));
            lock.release();
        }
        catch(...)
        {
            lock.release();
            throw;
        }
        return boost::cv_status::no_timeout==ret;
    }
    void signal() { waitable.notify_one(); }
    void unsignal() { }
};

struct boost_permitc
{
    static const char *desc() { return "boost::permit<true>"; }
    static const bool consumes=true;
    typedef boost::mutex mutex_t;
    typedef boost::permit<true> waitable_t;
    mutex_t mutex;
    waitable_t waitable;
    // No constructor necessary
    void lock() { mutex.lock(); }
    bool try_lock() { return mutex.try_lock(); }
    void unlock() { mutex.unlock(); }
    bool wait(size_t ms)
    {
        boost::cv_status ret=boost::cv_status::timeout;
        boost::unique_lock<mutex_t> lock(mutex, boost::adopt_lock);
        try
        {
            ret=waitable.wait_for(lock, boost::chrono::milliseconds(ms));
            lock.release();
        }
        catch(...)
        {
            lock.release();
            throw;
        }
        return boost::cv_status::no_timeout==ret;
    }
    void signal() { waitable.grant(); }
    void unsignal() { }
};

struct boost_permitnc
{
    static const char *desc() { return "boost::permit<false>"; }
    static const bool consumes=false;
    typedef boost::mutex mutex_t;
    typedef boost::permit<false> waitable_t;
    mutex_t mutex;
    waitable_t waitable;
    // No constructor necessary
    void lock() { mutex.lock(); }
    bool try_lock() { return mutex.try_lock(); }
    void unlock() { mutex.unlock(); }
    bool wait(size_t ms)
    {
        boost::cv_status ret=boost::cv_status::timeout;
        boost::unique_lock<mutex_t> lock(mutex, boost::adopt_lock);
        try
        {
            ret=waitable.wait_for(lock, boost::chrono::milliseconds(ms));
            lock.release();
        }
        catch(...)
        {
            lock.release();
            throw;
        }
        return boost::cv_status::no_timeout==ret;
    }
    void signal() { waitable.grant(); }
    void unsignal() { waitable.revoke(); }
};

#ifdef _WIN32
struct win32_condvar
{
    static const char *desc() { return "Win32 condition variable"; }
    typedef SRWLOCK mutex_t;
    typedef CONDITION_VARIABLE waitable_t;
    mutex_t mutex;
    waitable_t waitable;
    win32_condvar() : mutex(SRWLOCK_INIT) { InitializeConditionVariable(&waitable); }
    void lock() { AcquireSRWLockExclusive(&mutex); }
    bool try_lock() { return !!TryAcquireSRWLockExclusive(&mutex); }
    void unlock() { ReleaseSRWLockExclusive(&mutex); }
    bool wait(size_t ms) { return !!SleepConditionVariableSRW(&waitable, &mutex, ms, 0); }
    void signal() { WakeAllConditionVariable(&waitable); }
    void unsignal() { }
};
#else
struct posix_condvar
{
    static const char *desc() { return "POSIX condition variable"; }
    typedef pthread_mutex_t mutex_t;
    typedef pthread_cond_t waitable_t;
    mutex_t mutex;
    waitable_t waitable;
    posix_condvar() { mutex=PTHREAD_MUTEX_INITIALIZER; waitable=PTHREAD_COND_INITIALIZER; }
    void lock() { pthread_mutex_lock(&mutex); }
    bool try_lock() { return pthread_mutex_trylock(&mutex); }
    void unlock() { pthread_mutex_unlock(&mutex); }
    bool wait(size_t ms)
    {
        struct timespec ts;
        clock_gettime(CLOCK_REALTIME, &ts);
        ts.tv_nsec+=ms*1000000L;
        if(ts.tv_nsec>=1000000000L) { ts.tv_sec+=1; ts.tv_nsec-=1000000000L; }
        return ETIMEDOUT!=pthread_cond_timedwait(&waitable, &mutex, &ts);
    }
    void signal() { pthread_cond_broadcast(&waitable); }
    void unsignal() { }
};
#endif


int main(int argc, const char *argv[])
{
    if(argc>1 && !strncmp(argv[1], "-h", 2))
    {
        std::cout << "Usage: " << argv[0] << " <seconds of testing per object>" << std::endl;
        return 0;
    }
    int seconds=0;
    if(argc>1) seconds=atoi(argv[1]);
    if(!seconds) seconds=15;

    // steady_clock::now() isn't threadsafe on first use on Windows
    boost::chrono::steady_clock::now();

    int failed=0;
    if(!test_notify<boost_condvar, notify_locked>()(seconds))
    {
        ++failed;
        BOOST_TEST("test_notify<boost_condvar, notify_locked> != true" && 0);
    }
#if 0
    if(!test_notify<boost_condvar, notify_unlocked>()(seconds))
    {
        //++failed;
        //BOOST_TEST("test_notify<boost_condvar, notify_unlocked> != true" && 0);
    }
#endif
    if(!test_notify<boost_permitc, notify_locked>()(seconds))
    {
        ++failed;
        BOOST_TEST("test_notify<boost_permitc, notify_locked> != true" && 0);
    }
    if(!test_notify<boost_permitc, notify_unlocked>()(seconds))
    {
        ++failed;
        BOOST_TEST("test_notify<boost_permitc, notify_unlocked> != true" && 0);
    }
    if(!test_notify<boost_permitnc, notify_unlocked>()(seconds))
    {
        ++failed;
        BOOST_TEST("test_notify<boost_permitnc, notify_unlocked> != true" && 0);
    }
#ifdef _WIN32
    if(!test_notify<win32_condvar, notify_locked>()(seconds))
    {
        ++failed;
        BOOST_TEST("test_notify<win32_condvar, notify_locked> != true" && 0);
    }
#else
    if(!test_notify<posix_condvar, notify_locked>()(seconds))
    {
        ++failed;
        BOOST_TEST("test_notify<posix_condvar, notify_locked> != true" && 0);
    }
#endif
    if(!test_producerconsumer<boost_permitc>()(seconds))
    {
        ++failed;
        BOOST_TEST("test_producerconsumer<boost_permitc> != true" && 0);
    }
    if(!test_producerconsumer<boost_permitnc>()(seconds))
    {
        ++failed;
        BOOST_TEST("test_producerconsumer<boost_permitnc> != true" && 0);
    }

#ifdef _MSC_VER
//    std::cout << "Press return to exit" << std::endl;
//    getchar();
#endif
    return failed;
}